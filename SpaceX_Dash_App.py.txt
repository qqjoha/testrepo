# Import required libraries
import pandas as pd
import dash
import dash_html_components as html
import dash_core_components as dcc
from dash.dependencies import Input, Output
import plotly.express as px

# Read the airline data into pandas dataframe
spacex_df = pd.read_csv("spacex_launch_dash.csv")
max_payload = spacex_df['Payload Mass (kg)'].max()
min_payload = spacex_df['Payload Mass (kg)'].min()

def BuildOptions(DataFrameSeries, AddAll):  
    OptionList = [{'label': i, 'value': i} for i in DataFrameSeries.unique()]
    if AddAll == 1:       
        OptionList.insert(0,{'label': 'All', 'value': 'All'})          
    return OptionList

# Create a dash application
app = dash.Dash(__name__)

# Create an app layout
app.layout = html.Div(children=[html.H1('SpaceX Launch Records Dashboard',
                                        style={'textAlign': 'center', 'color': '#503D36',
                                               'font-size': 40}),
                                # TASK 1: Add a dropdown list to enable Launch Site selection
                                # The default select value is for ALL sites
                                dcc.Dropdown(id='site-dropdown',
                                    options=BuildOptions(spacex_df['Launch Site'],1),
                                    value='All',
                                    multi=True,
                                    placeholder='Select a Launch Site here',
                                    searchable=True
                                    ),
                                html.Br(),

                                # TASK 2: Add a pie chart to show the total successful launches count for all sites
                                # If a specific launch site was selected, show the Success vs. Failed counts for the site
                                html.Div(dcc.Graph(id='success-pie-chart')),
                                html.Br(),

                                html.P("Payload range (Kg):"),
                                # TASK 3: Add a slider to select payload range
                                dcc.RangeSlider(id='payload-slider',
                                    min=min_payload,
                                    max=max_payload,
                                    step=1000,
                                    value=[min_payload, max_payload],
                                    marks={i: '{}'.format(i) for i in range(int(min_payload), int(max_payload), 1000)},
                                    ),

                                # TASK 4: Add a scatter chart to show the correlation between payload and launch success
                                html.Div(dcc.Graph(id='success-payload-scatter-chart')),
                                ])

# TASK 2:
# Add a callback function for `site-dropdown` as input, `success-pie-chart` as output
@app.callback(
    Output(component_id='success-pie-chart', component_property='figure'),
    Input(component_id='site-dropdown', component_property="value"))
def pie(site_selected):
    if site_selected == 'All':
        # Successfull launches has class = 1
        pie_fig = px.pie(spacex_df, values='class', names='Launch Site', title="Success Launches for All Sites")
        return pie_fig
    else:
        filtered_df= spacex_df.loc[spacex_df['Launch Site'].isin(site_selected)]
        class_pie=filtered_df.groupby(['Launch Site', 'class']).size().reset_index(name='class count')
        pie_fig = px.pie(class_pie, values='class count', names='class', 
            title= "Rate of successfull launches (class=1) for site: " + str(site_selected)
            )
        return pie_fig

# TASK 4:
# Add a callback function for `site-dropdown` and `payload-slider` as inputs, `success-payload-scatter-chart` as output
@app.callback(
    Output(component_id='success-payload-scatter-chart', component_property='figure'),
    [Input(component_id='site-dropdown', component_property="value"),
    Input(component_id='payload-slider', component_property="value")])
def scatter(site_selected, payload_selected):   
    if site_selected == 'All':
        fig = px.scatter(spacex_df, x="Payload Mass (kg)", y="class",
                 color="Booster Version Category", hover_name="Launch Site") 
        return fig
    else:
        filtered_df= spacex_df.loc[(spacex_df['Launch Site'].isin(site_selected)) & 
                                    (spacex_df['Payload Mass (kg)'] >= payload_selected[0]) &
                                    (spacex_df['Payload Mass (kg)'] <= payload_selected[1])
                                    ]
        fig = px.scatter(filtered_df, x="Payload Mass (kg)", y="class",
                 color="Booster Version Category", hover_name="Launch Site") 
        return fig

# Run the app
if __name__ == '__main__':
    app.run_server()
